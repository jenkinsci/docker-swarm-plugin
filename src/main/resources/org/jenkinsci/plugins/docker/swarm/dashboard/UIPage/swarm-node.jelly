<?jelly escape-by-default='false'?>
<j:jelly xmlns:j="jelly:core">

    <div class="card info-block node">
        <div class="card-header">
            <div class="clr-row">
                <div class="clr-col-auto">
                    <clr-icon shape="${node.role=='manager'?'cluster':'node'}" size="36"></clr-icon>
                    <span class="badge badge-blue">${node.computerCount}</span>
                </div>
                <div class="clr-col">
                    ${node.name} (${node.role})
                </div>
                <div class="clr-col-auto flex">
                    <span class="chart-small-container">
                        <canvas id="cpu-${node.name}" width="30" height="30"></canvas>
                        <span class="chart-small-text">CPU</span>
                    </span>
                    <span class="chart-small-container">
                        <canvas id="memory-${node.name}" width="30" height="30"></canvas>
                        <span class="chart-small-text">Memory</span>
                    </span>
                </div>
            </div>
        </div>
        <div class="card-block">
            <div class="card-text">

                <script>
                    (function() {
                        //drawCharts();

                        function drawCharts() {
                            drawMemoryChart();
                            drawCpuChart();
                        }

                        function buildChartOptions(title) {
                            return {
                                title: title,
                                titlePosition: 'none',
                                legend: { position: 'none' },
                                enableInteractivity: false,
                                width: 30,
                                height: 30,
                                theme: 'maximized',
                                colors:['grey', 'red'],
                                backgroundColor: { fill:'transparent' }
                            };
                        }

                        function drawMemoryChart() {
                            var data = ${node.memoryUsageJson};

                            // Remove the first entry (header)
                            data.shift();

                            // Build a list of labels
                            var labels = data.map(function(x) {
                                return x[0];
                            });
                            // Build a list of values
                            var values = data.map(function(x) {
                                return x[1];
                            });

                            // Build the config and draw the chart
                            var config = {
                                type: 'pie',
                                data: {
                                    datasets: [{
                                        data: values,
                                        backgroundColor: ['red', 'green'],
                                        borderWidth: 1
                                    }],
                                    labels: labels
                                },
                                options: {
                                    responsive: false,
                                    maintainAspectRatio: false,
                                    title: {
                                        display: false,
                                        text: 'memory',
                                        padding: 0
                                    },
                                    legend: {
                                        display: false,
                                        labels: {
                                            usePointStyle: true,
                                        },
                                    },
                                    tooltips: {
                                        enabled: false,
                                    },
                                    plugins: {
                                        datalabels: {
                                            backgroundColor: function(context) {
                                                return context.dataset.backgroundColor;
                                            },
                                            color: 'white',
                                            padding: 2,
                                            display: false,
                                            font: {
                                                weight: 'bold'
                                            },
                                            formatter: (value, ctx) => {
                                                let sum = 0;
                                                let dataArr = ctx.chart.data.datasets[0].data;
                                                dataArr.map(data => {
                                                    sum += data;
                                                });
                                                let percentage = (value*100 / sum).toFixed(1) + '%';
                                                return percentage;
                                            }
                                        }
                                    }
                                }
                            };
                            var ctx = document.getElementById('memory-${node.name}').getContext('2d');
                            var myPie = new Chart(ctx, config);
                        }
                        
                        function drawCpuChart() {
                            //var cpuData = google.visualization.arrayToDataTable(${node.cpuUsageJson});
                            //var cpuChart = new google.visualization.PieChart(document.getElementById('cpu-${node.name}'));
                            //var options = buildChartOptions('cpu');
                            //cpuChart.draw(cpuData, options);
                        }
                    })()
                </script>

                <ul class="list-unstyled">
                    <j:if test='${node.isIdle()}'>
                        <i>Idle</i>
                    </j:if>

                    <j:forEach items="${node.currentBuilds}" var="build">
                        <li>
                            <a href="${build.absoluteUrl}">
                                ${build.fullDisplayName}
                            </a>
                        </li>
                    </j:forEach>
    
                    <j:forEach items="${node.unknownRunningTasks}" var="task">
                        <li>
                            ${task.service.Spec.Name}
                        </li>
                    </j:forEach>
                </ul>
            </div>
        </div>
    </div>
</j:jelly>
